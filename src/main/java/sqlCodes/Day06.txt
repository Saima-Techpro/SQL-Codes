-- RECAP the previous session (ORDER BY , GROUP BY, HAVING)
--HAVING CLAUSE
--        It is used with SELECT
--        It is helps to apply conditions / filter (Like WHERE)
--        It is used after GROUP BY in place of WHERE
--        Difference:
--                  1) WHERE is used to filter individual/single row; HAVING is used to filter groups
--                  2) You can't use Aggregate Functions (like MAX, MIN, AVG, SUM, COUNT) after WHERE condition; but you use them after HAVING clause


CREATE TABLE workers(
  id CHAR(9),
  name VARCHAR(50),
  state VARCHAR(50),
  salary SMALLINT,
  company VARCHAR(20)
)

INSERT INTO workers VALUES(123456789, 'John Walker', 'Florida', 2500, 'IBM');
INSERT INTO workers VALUES(234567890, 'Brad Pitt', 'Florida', 1500, 'APPLE');
INSERT INTO workers VALUES(345678901, 'Eddie Murphy', 'Texas', 3000, 'IBM');
INSERT INTO workers VALUES(456789012, 'Eddie Murphy', 'Virginia', 1000, 'GOOGLE');
INSERT INTO workers VALUES(567890123, 'Eddie Murphy', 'Texas', 7000, 'MICROSOFT');
INSERT INTO workers VALUES(456789012, 'Brad Pitt', 'Texas', 1500, 'GOOGLE');
INSERT INTO workers VALUES(123456710, 'Mark Stone', 'Pennsylvania', 2500, 'IBM');


SELECT * FROM workers;

--Find the number of employees if it is more than 1 per state
SELECT state, COUNT(state) AS number_of_employees
FROM workers
GROUP BY state
HAVING COUNT(state)>1;

--Find the minimum salary if it is more than 2000 for every company

SELECT company, MIN(salary) AS minimum_salary_more_than_2000_per_company
FROM workers
GROUP BY company
HAVING MIN(salary)>2000;

--Find the maximum salary if it is less than 3000 for every state
SELECT state, MAX(salary)
FROM workers
GROUP BY state
HAVING MAX(salary)<3000;

--After GROUP BY use HAVING. We cannot use WHERE after GROUP BY. Because after WHERE condition you cannot use
--Aggregate Functions like SUM, COUNT, MAX, MIN, AVG

-----------------------------------------------------------------------------------------------
--OPERATORS IN SQL  (UNION, UNION ALL, INTERSECT, EXCEPT)

--UNION Operator
--1)It is used to combine the result of 2 queries.
--2)UNION Operator returns UnÄ±que records everytime. If there are repeated records it removes the repeated ones
--3) Data types of the columns should be same; number of columns should be same; columns must be in the same order
--3)By using "UNION Operator", we are able to put different fields into a single field like in the following example.


--Find the state whose salary is greater than 3000, employee names less than 2000 WITHOUT DUPLICATION.

SELECT state AS "State Or Employee name", salary
FROM workers
WHERE salary>3000

UNION

SELECT name AS "State Or Employee name", salary
FROM workers
WHERE salary<2000


SELECT state , salary
FROM workers
WHERE salary>3000
UNION
SELECT name, salary
FROM workers
WHERE salary<2000


SELECT state , salary
FROM workers
WHERE salary>3000
UNION
SELECT company, salary
FROM workers
WHERE salary<2000
-----------------------------------------------------------------------------------------------
--UNION ALL Operator
--1)Find the state whose salary is greater than 3000, employee names less than 2000 WITH DUPLICATE values.
--2) Data types of the columns should be same; number of columns should be same; columns must be in the same order
--3) Works faster than UNION (coz no filter)

SELECT state AS "State Or Employee name", salary
FROM workers
WHERE salary>3000

UNION ALL --Does the same as UNION, just it returns repeated records if there is any.

SELECT name AS "State Or Employee name", salary
FROM workers
WHERE salary<2000

-------------------------------------------------------------------------------------------------
--INTERSECT Operator
--Returns common output/records of 2 queries
--It returns unique data

--Find all common employee names whose salary is greater than 1000, less than 2000

SELECT name, salary
FROM workers
WHERE salary>1000
INTERSECT  -- LIMITS ARE EXCLUSIVE
SELECT name, salary
FROM workers
WHERE salary<2000

-- 2nd way:
SELECT name,salary
FROM workers
WHERE salary > 1000 AND salary < 2000
GROUP BY name,salary

--3rd way
SELECT name,salary
FROM workers
WHERE salary BETWEEN 1000 AND 2000   -- LIMITS ARE INCLUSIVE
GROUP BY name,salary;


--Find all common employee names whose salary is greater than 2000 and company name is IBM, APPLE or GOOGLE
SELECT name
FROM workers
WHERE salary>2000

INTERSECT

SELECT name
FROM workers
WHERE company IN('IBM', 'APPLE', 'GOOGLE');


SELECT * FROM workers;

-----------------------------------------------------------------------------------------------
--EXCEPT Operator: It is used to extract one query result from another one
--                 It returns unique records

--Find the employee names whose salary is less than 3000 and not working in GOOGLE
SELECT name
FROM workers
WHERE salary<3000

EXCEPT

SELECT name
FROM workers
WHERE company='GOOGLE';

-----------------------------------------------------------------------------------------------
OPERATORS are used to combine/filter results of queries, JOINS are used to combine/filter TABLES' data in one table
--JOINS
--1)INNER JOIN: It returns common data from two tables.
--2)LEFT JOIN: Returns all data from the first table (the name that you type first is considered first table in SQL)
--3)RIGHT JOIN: Returns all data from the second table
--4)FULL JOIN: Returns all data from both table
--5)SELF JOIN: You will have a single table but you will use it as 2 tables

CREATE TABLE my_companies(
  company_id CHAR(3),
  company_name VARCHAR(20)
);

INSERT INTO my_companies VALUES(100, 'IBM');
INSERT INTO my_companies VALUES(101, 'GOOGLE');
INSERT INTO my_companies VALUES(102, 'MICROSOFT');
INSERT INTO my_companies VALUES(103, 'APPLE');

SELECT * FROM my_companies;

CREATE TABLE orders(
  company_id CHAR(3),
  order_id CHAR(3),
  order_date DATE
);

INSERT INTO orders VALUES(101, 11, '17-Apr-2023');
INSERT INTO orders VALUES(102, 22, '18-Apr-2023');
INSERT INTO orders VALUES(103, 33, '19-Apr-2023');
INSERT INTO orders VALUES(104, 44, '20-Apr-2023');
INSERT INTO orders VALUES(105, 55, '21-Apr-2023');

SELECT * FROM orders;

--INNER JOIN
--SELECT company name, order id and order date for common companies

SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc INNER JOIN orders o
ON o.company_id=mc.company_id;

--2) LEFT JOIN: Returns all data from first table
--Get company_name,  order id and order date for the companies in my_companies table

SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc LEFT JOIN orders o
ON mc.company_id=o.company_id;

--The purpose of the ON clause is to specify the join conditions,
--that is, to define how the tables should be joined. Specifically, you define how the records should be matched.

--3) RIGHT JOIN: Returns all data from second table
--Get company_name,  order id and order date for the companies in my_companies table

SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc RIGHT JOIN orders o
ON mc.company_id=o.company_id;

-- ORDER MATTERS


--4) FULL JOIN: Returns all data from BOTH tables
--Get company_name,  order id and order date for the companies in my_companies table

SELECT mc.company_name, o.order_id, o.order_date
FROM my_companies mc FULL JOIN orders o
ON mc.company_id=o.company_id;

--5) SELF JOIN: Returns common data from the table ITSELF
--Get company_name,  order id and order date for the companies in my_companies table


CREATE TABLE jobs(
  id CHAR(2),
  name VARCHAR(20),
  title VARCHAR(40),
  manager_id CHAR(2)
)

INSERT INTO workers VALUES(1, 'Ali Can', 'SDET', 2);
INSERT INTO workers VALUES(2, 'John Walker', 'QA, 3);
INSERT INTO workers VALUES(3, 'Angie Star', 'QA Lead', 4);
INSERT INTO workers VALUES(4, 'Amy Sky', 'CEO', 5);


SELECT * FROM jobs;

SELECT m1.name AS "Employee Name", m2.name AS "Manager Name"
FROM workers m1 SELF JOIN workers m2
ON m1.id=m2.manager_id;












